<?xml version="1.0" encoding="UTF-8"?>
<project name="buildtest" default="build" basedir="."  xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <description>Builds, tests, and runs the project MovieManager.</description>

	<property file="build.properties"/>

    <!--************************************************
    * Maven Dependencies declaration
    ***************************************************-->
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant">
        <classpath>
            <pathelement location="lib/maven-ant-tasks.jar" />
        </classpath>
    </typedef>

    <artifact:pom id="mypom" file="pom.xml" />
    <artifact:dependencies pomRefId="mypom" pathId="dependency.classpath" />

    <path id="project.classpath">
        <pathelement location="${build.classes.dir}"/>
    </path>
    <path id="runtime.classpath">
        <path refid="project.classpath"/>
        <!-- Add the dependencies classpath -->
        <path refid="dependency.classpath"/>
        <!-- Add the base directory to the classpath so the
             hibernate.properties file is picked up. -->
        <pathelement location="../"/>
    </path>
    <path id="hibernate.runtime.classpath" refid="runtime.classpath"/>

    <!--************************************************
    * Common targets
    ***************************************************-->
 

	<!--<target name="hibernate-tasks" depends="-hibernate-def-props,-generate-hbm" />
	
	<target name="test-compile" depends="-test-compile,-hibernate-test-def-props,-gen-dbunit" />
    <target name="test-hibernate-tasks" depends="-hibernate-test-def-props,compile,-generate-hbm,-gen-dbunit" />-->
	<target name="build" depends="-cleanall,app-compile,test-compile" /><!--test-compile,test-run" />-->
		<target name="-cleanall" depends="-app-clean">
        <delete dir="${build.dir}" verbose="false"/>
		<delete dir="${tmp.dir}" verbose="false"/>
    </target>

	<!--************************************************
    * APPLICATION-relative targets
    ***************************************************-->
	
	<target name="app-compile" depends="-app-compile,-hibernate-props,-generate-hbm,-app-copy-other-files" /><!-- -compile,,-generate-hbm" />-->
	
	<target name="-app-clean">
        <delete dir="${build.classes.dir}" verbose="false"/>
		<delete dir="${tmp.dir}" verbose="false"/>
    </target>
	
    <target name="-app-compile" depends="-app-clean">   
		<mkdir dir="${build.classes.dir}"/>	
        <javac 
			srcdir="${src.java.dir}" 
			destdir="${build.classes.dir}" 
			includeantruntime="false"
			debug="${compile.debug}"
			deprecation="${compile.deprecation}"
			optimize="${compile.optimize}">
            <classpath refid="hibernate.runtime.classpath"/>
            <!--<compilerarg value="-Xlint:deprecation" />-->
        </javac>
    </target>
	
	<target name="-hibernate-props" >
        <property file="hibernate.properties"/>
		<property prefix="test" file="hibernate-test.properties"/>
		<property prefix="app" file="hibernate-app.properties"/>
    </target>
	
	<target name="-generate-hbm">
        <taskdef
            name="hibernatedoclet"
            classname="xdoclet.modules.hibernate.HibernateDocletTask"
            classpathref="hibernate.runtime.classpath"
            />
        <hibernatedoclet
            destdir="${build.classes.dir}"
			force="true"
			excludedtags="@version,@author,@todo"
            verbose="${verbose}">
            <fileset dir="${src.java.dir}">
                <include name="${hibernate.package.path}/**/*.java"/>
            </fileset>
            <hibernate version="3.0"/>
			<hibernatecfg
                dialect="${hibernate.db.dialect}"
                jdbcUrl="hibernate.db.url"
                driver="${hibernate.db.driver}"
                userName="${hibernate.db.username}"
                password="${hibernate.db.password}"
                showSql="hibernate.showSql"
				poolSize="1"
				destdir="${tmp.dir}"
				cacheProviderClass="org.hibernate.cache.NoCacheProvider"
                version="3.0">
                <otherProperty name="hibernate.hbm2ddl.auto" value="hibernate.hbm2ddl" />
                <otherProperty name="hibernate.connection.shutdown" value="true" />
                <otherProperty name="current_session_context_class" value="thread" />
                <otherProperty name="jdbc.batch_size" value="0" />
            </hibernatecfg>
        </hibernatedoclet>
		<copy file="${tmp.dir}/hibernate.cfg.xml" todir="${build.classes.dir}"/>
		<replace file="${build.classes.dir}/hibernate.cfg.xml" replacefilterfile="hibernate-app.properties" failOnNoReplacements="true" summary="true"/>
		<copy file="${tmp.dir}/hibernate.cfg.xml" todir="${test.classes.dir}"/>
		<replace file="${test.classes.dir}/hibernate.cfg.xml" replacefilterfile="hibernate-test.properties" failOnNoReplacements="true" summary="true"/>
    </target>
	
	<target name="-app-copy-other-files">
		<copy file="${src.java.dir}/log4j.properties" todir="${build.classes.dir}"/>
	</target>
	

	<!--************************************************
    * TEST-relative targets
    ***************************************************-->
	
	<target name="test-compile" depends="-test-compile,-test-gen-dbunit-propfile,test-gen-dbunit,-test-copy-other-files" />
	
	<target name="-test-clean">
        <delete dir="${test.data.dir}" verbose="false"/>
    </target>
	
	<target name="-test-compile" depends="-test-clean">
		<mkdir dir="${test.classes.dir}"/>
		<mkdir dir="${test.data.dir}"/>
        <javac 
			srcdir="${test.java.dir}" 
			destdir="${test.classes.dir}"
			debug="${compile.debug}"
			deprecation="${compile.deprecation}"
			optimize="${compile.optimize}"
			includeantruntime="false">
            <classpath refid="hibernate.runtime.classpath"/>
            <!--<compilerarg value="-Xlint:deprecation" />-->
        </javac>
    </target>
	
	<target name="-test-gen-dbunit-propfile">
        <propertyfile file="${test.classes.dir}/hibernate.properties">
            <entry key="hibernate.db.url" value="${test.hibernate.db.url}"/>
            <entry key="hibernate.db.driver" value="${hibernate.db.driver}"/>
            <entry key="hibernate.db.username" value="${hibernate.db.username}"/>
            <entry key="hibernate.db.password" value="${hibernate.db.password}"/>
        </propertyfile>
    </target>
	
	<target name="-test-schema-export" description="Creates a SQL schema regarding on the mapped Java POJOs.">
        <mkdir dir="${tmp.dir}/sql" />
        <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="hibernate.runtime.classpath"/>
        <hibernatetool destdir="${tmp.dir}/sql">
            <classpath>
                <path location="${build.classes.dir}"/>
            </classpath>	

            <configuration configurationfile="${build.classes.dir}/hibernate.cfg.xml"/>
            <hbm2ddl drop="false" create="true" format="true" export="false" outputfilename="database-image.sql"/>
        </hibernatetool>
    </target>
	
	<target name="-test-schema-inject">
	<delete dir="database/test"/>
	<echo message="Embed a line break:${test.hibernate.db.url}"/>
        <sql classpathref="hibernate.runtime.classpath"
    driver="org.hsqldb.jdbcDriver"
    url="${test.hibernate.db.url}"
    userid="sa"
    password=""
    autocommit="true"
    src="${tmp.dir}/sql/database-image.sql"
>
        </sql>
        <sql classpathref="hibernate.runtime.classpath"
    driver="org.hsqldb.jdbcDriver"
    url="${test.hibernate.db.url}"
    userid="sa"
    password=""
    autocommit="true"
><![CDATA[
shutdown;]]>
        </sql>
    </target>
	
	<target name="test-gen-dbunit" depends="-test-schema-export,-test-gen-dbunit-propfile,-test-schema-inject">
        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="hibernate.runtime.classpath"/>
        <dbunit
   driver="org.hsqldb.jdbcDriver"
    url="${test.hibernate.db.url}"
    userid="sa"
    password="">
            <export dest="${test.classes.dir}/database-schema.dtd" format="dtd"/>
            <dbconfig>
                <property name="datatypeFactory" value="org.dbunit.ext.hsqldb.HsqldbDataTypeFactory" />
            </dbconfig>
        </dbunit>
    </target>
	
	<target name="-test-copy-other-files">
		<copy file="${src.java.dir}/log4j.properties" todir="${test.classes.dir}"/>
	</target>
	
	<target name="-last-cleanup">
		<delete dir="${tmp.dir}" verbose="false"/>
	</target>


    <!--************************************************
    * Hibernate targets
    ***************************************************-->

    <!--************************************************
    * DBUnit targets
    ***************************************************-->



    <!--************************************************
    * Test targets
    ***************************************************-->
    <target name="test">
        <delete dir="${junit.dir}"/>
        <delete dir="${reports.dir}"/>
		
		<mkdir dir="${junit.dir}"/>
        <mkdir dir="${reports.dir}"/>

		
        <junit printsummary="yes">

		<classpath refid="hibernate.runtime.classpath"/>
		<classpath>
			<pathelement location="${test.classes.dir}" /> 
			<pathelement location="${build.classes.dir}" /> 
			<pathelement path="${java.class.path}"/>
		</classpath>

            <batchtest todir="${junit.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="${app.classes.dir}/**/*Test.class"/>
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml" usefile="true"/>
        </junit>
        <junitreport todir="${reports.dir}">
            <fileset dir="${junit.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}"/>
        </junitreport>
		<property name="myclasspath" refid="hibernate.runtime.classpath"/>
<echo message="classpath=${java.class.path}"/>
    </target>
	

<!-- Display the classpath -->
<target name="printclspath">
<property name="myclasspath" refid="hibernate.runtime.classpath"/>
<echo message="classpath=${java.class.path}"/>
</target>


</project>